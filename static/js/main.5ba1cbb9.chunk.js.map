{"version":3,"sources":["assets/avatar.png","components/header/headerStyle.js","components/header/Header.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PageTitle","styled","h2","Avatar","div","avatarImage","HeaderWrapper","Header","PureComponent","Main","state","isShowingMusic","this","onClick","setState","allow","frameBorder","height","style","width","transition","maxHeight","maxWidth","overflow","background","sandbox","src","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,oC,22BCGpC,IAAMC,EAAYC,IAAOC,GAAV,KAITC,EAASF,IAAOG,IAAV,IACSC,KAefC,EAAgBL,IAAOG,IAAV,KCrBbG,EAAb,uKAEQ,OACI,kBAACD,EAAD,KACI,kBAACH,EAAD,MACJ,kBAACH,EAAD,iCALZ,GAA4BQ,iBCCfC,EAAb,4MACIC,MAAQ,CACJC,gBAAgB,GAFxB,uDAKc,IAAD,OACEA,EAAkBC,KAAKF,MAAvBC,eACP,OACI,6BAEI,kBAAC,EAAD,MAEA,yBAAKE,QAAS,kBAAM,EAAKC,SAAS,CAACH,gBAAiBA,MAApD,oBAEA,4BAAQI,MAAM,iCAAiCC,YAAY,IAAIC,OAAO,MAC9DC,MAAO,CACHC,MAAO,OACPC,WAAY,YACZC,UAAWV,EAAiB,SAAW,MACvCW,SAAU,QACVC,SAAU,SACVC,WAAY,eAEhBC,QAAQ,2IACRC,IAAI,mFAxB5B,GAA0BlB,iBCYXmB,MAVf,WACE,OACE,yBAAKC,UAAU,OACX,kBAAC,mBAAD,KACI,kBAAC,EAAD,SCGQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5ba1cbb9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.e3a3ac15.png\";","import styled from \"styled-components\";\nimport avatarImage from '../../assets/avatar.png'\n\nexport const PageTitle = styled.h2`\n    font-family: 'Gloria Hallelujah', cursive;\n`\n\nexport const Avatar = styled.div`\n    background-image: url(${avatarImage});\n    background-size: cover;\n    height: 50px;\n    align-self: center;\n    width: 50px;\n    border-radius: 50%;\n    transition: 0.5s ease;\n    object-fit: cover;\n    &:hover {\n        width: 60px;\n        height: 60px;\n        filter: grayscale(1);\n    }\n`\n\nexport const HeaderWrapper = styled.div `\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n`","import React, {PureComponent} from 'react'\nimport {Avatar, HeaderWrapper, PageTitle} from \"./headerStyle\";\nexport class Header extends PureComponent {\n    render() {\n        return(\n            <HeaderWrapper>\n                <Avatar />\n            <PageTitle>Hello, Emilian Radu</PageTitle>\n            </HeaderWrapper>\n        )\n    }\n}","import React, {PureComponent} from 'react'\nimport {Header} from \"./header/Header\";\n\nexport class Main extends PureComponent {\n    state = {\n        isShowingMusic: false\n    }\n\n    render() {\n        const {isShowingMusic} = this.state\n        return (\n            <div>\n\n                <Header/>\n                {/*</Parallax>*/}\n                <div onClick={() => this.setState({isShowingMusic: !isShowingMusic})}>show apple music</div>\n\n                <iframe allow=\"autoplay *; encrypted-media *;\" frameBorder=\"0\" height=\"450\"\n                        style={{\n                            width: '100%',\n                            transition: '0.5s ease',\n                            maxHeight: isShowingMusic ? '1000px' : '0px',\n                            maxWidth: '660px',\n                            overflow: 'hidden',\n                            background: 'transparent'\n                        }}\n                        sandbox=\"allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation\"\n                        src=\"https://embed.music.apple.com/ro/playlist/fav-albums/pl.u-11zBBdaTK92YPL5\"/>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport {ParallaxProvider} from \"react-scroll-parallax\";\nimport {Main} from \"./components/Main\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <ParallaxProvider>\n            <Main/>\n        </ParallaxProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}